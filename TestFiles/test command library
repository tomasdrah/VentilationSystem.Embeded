#include<SPI.h>

#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_I2CDevice.h>
#include <Adafruit_SPIDevice.h>

#include "Embedded/Fd/Bases/Bases.h"
#include "Embedded/Fd/Independent/Independent.h"

auto CommandHolderMaster = TdEmbeddedFd::CommandHolder();
auto CommandHolderSlave = TdEmbeddedFd::CommandHolder();


void setup(void) {
    Serial.begin(9600);
    CommandHolderMaster.NewCommand(13);
    Serial.println("M: new cmd 13");

}

void loop(void) {

    delay(10000);


    if (CommandHolderMaster.HasNewCommand()) {
        Serial.println("M: sending cmd 13");
        auto cmd = CommandHolderMaster.GetNewCommand();
        CommandHolderSlave.NewCommandWithArgsDataArray(cmd->GetCommandId(), cmd->GetArgs());
        Serial.println("M: sent cmd 13");
        Serial.println("S: new cmd received");
    }

    delay(1000);

    if (CommandHolderSlave.HasNewCommandWithId(13)) {
        Serial.println("S: processing cmd 13");
        auto cmd = CommandHolderSlave.GetNewCommandById(13);
        cmd->SetIsCommandStarted();
        Serial.println("S: starting cmd 13");

        Serial.println("S: reading temperature");
        auto response = cmd->GetResponse();
        response->AddByte(35);
        response->AddByte(99);

        cmd->SetIsCommandFinished();
        Serial.println("S: finished cmd 13");
    }

    delay(1000);
    Serial.println("M: Im asking if any cmd is finished");
    Serial.println("S: Im being asked if any cmd is finished");

    bool slaveHasSomeCmdFinished = CommandHolderSlave.HasFinishedCommand();
    if (CommandHolderSlave.HasFinishedCommand()) {
        Serial.println("S: has some cmd finished");
        Serial.print("S: has finished cmd:");
        Serial.print((int) CommandHolderSlave.GetFinishedCommandId());
    } else {
        Serial.println("S: has no cmd finished");
    }

    delay(1000);
    if (slaveHasSomeCmdFinished) {
        Serial.println("M: Seems like the cmd 13 is finished. i will ask for the result");
        Serial.println("S: Im being asked for the result of cmd 13");
    }

    if (CommandHolderSlave.HasFinishedCommandWithId(13)) {
        auto slaveCmd = CommandHolderSlave.GetFinishedCommandById(13);
        auto slaveResp = slaveCmd->GetResponse();
        Serial.println("S: starting sending the result data");
        if (CommandHolderMaster.HasCommandWithId(13)) {
            Serial.println("M: starting receiving the data");
            auto masterCmd = CommandHolderMaster.GetCommandById(13);
            masterCmd->SetResponse(slaveResp->Array, slaveResp->ArrayLength);
            masterCmd->SetIsCommandFinished();
            Serial.println("M: data received");
        }
        Serial.println("S: data sent, cleaning the command");
        slaveCmd->ClearTheCommand();
    }

    delay(1000);
    if (CommandHolderMaster.HasFinishedCommand()) {
        Serial.println("M: Seems like some cmd is finished");
        Serial.print("M: has finished cmd:");
        Serial.println((int) CommandHolderMaster.GetFinishedCommandId());

        auto cmd = CommandHolderMaster.GetFinishedCommand();
        auto result = cmd->GetResponse();
        Serial.print("M: the cmd result is:");
        Serial.print((int) result->GetByte(0));
        Serial.print(":");
        Serial.println((int) result->GetByte(1));
        Serial.println("M: Cleaning the cmd");
        cmd->ClearTheCommand();
    }

    Serial.println();
    delay(1000);
}